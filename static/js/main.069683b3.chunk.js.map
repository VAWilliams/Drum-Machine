{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["kit","title","key","src","App","props","state","activatedPad","handleKeyDown","bind","handleClick","multiplePads","map","pad","upperKey","toUpperCase","id","replace","class","this","onClick","event","audio","document","getElementById","find","getAttribute","setState","parent","parentElement","classList","add","currentTime","play","setTimeout","remove","target","children","addEventListener","console","clear","removeEventListener","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+PAIMA,G,MAAM,CACV,CACEC,MAAO,WACPC,IAAK,IACLC,IAAK,4DACJ,CACDF,MAAO,WACPC,IAAK,IACLC,IAAK,4DACJ,CACHF,MAAO,WACPC,IAAK,IACLC,IAAK,4DACJ,CACDF,MAAO,WACPC,IAAK,IACLC,IAAK,8DACJ,CACDF,MAAO,OACPC,IAAK,IACLC,IAAK,4DACJ,CACDF,MAAO,UACPC,IAAK,IACLC,IAAK,0DACJ,CACDF,MAAO,cACPC,IAAK,IACLC,IAAK,8DACJ,CACDF,MAAO,OACPC,IAAK,IACLC,IAAK,8DACJ,CACDF,MAAO,YACPC,IAAK,IACLC,IAAK,4DA8FQC,E,kDAxFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,aAAc,MAEhB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBANF,E,qDAWjB,IAAIE,EAAeX,EAAIY,KAAI,SAAAC,GAAQ,IAE3BZ,EAAoBY,EAApBZ,MAAOC,EAAaW,EAAbX,IAAKC,EAAQU,EAARV,IACdW,EAAWZ,EAAIa,cACfC,EAAKf,EAAMgB,QAAQ,KAAM,KAE7B,OACE,yBAAKD,GAAIA,EAAIE,MAAM,WAAWhB,IAAKA,GAChCY,EACD,2BAAOE,GAAIF,EAAUI,MAAM,OAAOf,IAAKA,QAKvCI,EAAiBY,KAAKb,MAAtBC,aAGN,OACE,yBAAKS,GAAG,gBACN,yBAAKA,GAAG,MAAMI,QAASD,KAAKT,aACzBC,GAEH,yBAAKK,GAAG,YACN,wBAAIA,GAAG,WACHT,GAAgBA,EAAaN,OAAU,c,oCAQrCoB,GACZ,IAAIL,EAAE,UAAMK,EAAMnB,IAAIa,eAClBO,EAAQC,SAASC,eAAeR,GACpC,GAAKM,EAAL,CACA,IAAIf,EAAeP,EAAIyB,MACrB,SAAAZ,GAAG,OAAIA,EAAIV,MAAQmB,EAAMI,aAAa,UAExCP,KAAKQ,SAAS,CACZpB,aAAcA,IAEhB,IAAIqB,EAASN,EAAMO,cACnBD,EAAOE,UAAUC,IAAI,kBACrBT,EAAMU,YAAc,EACpBV,EAAMW,OACNC,YACE,kBAAMN,EAAOE,UAAUK,OAAO,oBAC9B,Q,kCAIQd,GACV,IAAIR,EAAMQ,EAAMe,OAChB,GAAKvB,EAAL,CACA,IAAIS,EAAQT,EAAIwB,SAAS,GACzB,GAAKf,EAAL,CACA,IAAIf,EAAeP,EAAIyB,MACrB,SAAAZ,GAAG,OAAIA,EAAIV,MAAQmB,EAAMI,aAAa,UAExCP,KAAKQ,SAAS,CACZpB,aAAcA,IAEhBe,EAAMU,YAAc,EACpBV,EAAMW,W,0CAINV,SAASe,iBAAiB,UAAWnB,KAAKX,eAC1C+B,QAAQC,U,6CAGRjB,SAASkB,oBAAoB,e,GArFfC,aChCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SDuHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.069683b3.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport './App.css';\n\nconst kit = [\n  {\n    title: \"Heater 1\",\n    key: \"q\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n  }, {\n    title: \"Heater 2\",\n    key: \"w\",\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n  }, {\n  title: \"Heater 3\",\n  key: \"e\",\n  src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n}, {\n  title: \"Heater 4\",\n  key: \"a\",\n  src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n}, {\n  title: \"Clap\",\n  key: \"s\",\n  src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n}, {\n  title: \"Open HH\",\n  key: \"d\",\n  src: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n}, {\n  title: \"Kick n' Hat\",\n  key: \"z\",\n  src: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n}, {\n  title: \"Kick\",\n  key: \"x\",\n  src: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n}, {\n  title: \"Closed HH\",\n  key: \"c\",\n  src: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n}\n];\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      activatedPad: null\n    }\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  render() {\n    \n    let multiplePads = kit.map(pad => {\n\n      let { title, key, src } = pad;\n      let upperKey = key.toUpperCase();\n      let id = title.replace(/ /g, '_');\n\n      return (\n        <div id={id} class=\"drum-pad\" key={key}>\n          {upperKey}\n          <audio id={upperKey} class=\"clip\" src={src}/>\n        </div>\n      )\n\n    });\n    let { activatedPad } = this.state;\n\n\n    return (\n      <div id=\"drum-machine\">\n        <div id=\"pad\" onClick={this.handleClick}>\n          {multiplePads}\n        </div>\n        <div id=\"controls\">\n          <h1 id=\"display\">\n            {(activatedPad && activatedPad.title) || \"Heater\"}\n          </h1>\n        </div>\n        \n      </div>\n    );\n  }\n\n  handleKeyDown(event) {\n    let id = `${event.key.toUpperCase()}`;\n    let audio = document.getElementById(id);\n    if (!audio) return;\n    let activatedPad = kit.find(\n      pad => pad.src === audio.getAttribute('src')\n    );\n    this.setState({\n      activatedPad: activatedPad\n    });\n    let parent = audio.parentElement\n    parent.classList.add('drum-pad-hover');\n    audio.currentTime = 0;\n    audio.play();\n    setTimeout(\n      () => parent.classList.remove('drum-pad-hover'),\n      100\n    );\n  }\n\n  handleClick(event) {\n    let pad = event.target;\n    if (!pad) return;\n    let audio = pad.children[0];\n    if (!audio) return;\n    let activatedPad = kit.find(\n      pad => pad.src === audio.getAttribute('src')\n    );\n    this.setState({\n      activatedPad: activatedPad\n    });\n    audio.currentTime = 0;\n    audio.play();\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown);\n    console.clear();\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keydown');\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}